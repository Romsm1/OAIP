class Stick:
    def __init__(self):
        self.__description = "Палка"
        self.__count = 1

    def get_count(self):
        return self.__count

    def set_count(self, count):
        if count >= 0:
            self.__count = count

    def info(self):
        return f"{self.__description} ({self.get_count()})"


class Resource:
    def __init__(self, name, count):
        self.__name = name
        self.__count = count

    def get_name(self):
        return self.__name

    def get_count(self):
        return self.__count

    def set_count(self, count):
        if count >= 0:
            self.__count = count

    def info(self):
        return f"{self.__name} ({self.get_count()})"

class IronPickaxe:
    def __init__(self):
        self.__material = "Железо"
        self.__durability = 32
        self.__description = f"{self.__material} Кирка"

    def get_durability(self):
        return self.__durability

    def set_durability(self, value):
        if value >= 0:
            self.__durability = value

    def info(self):
        return f"{self.__description} ({self.get_durability()})"

    def use(self):
        if self.get_durability() > 0:
            self.set_durability(self.get_durability() - 1)
            return True
        else:
            print("Инструмент сломан")
            return False


class DiamondPickaxe:
    def __init__(self):
        self.__material = "Алмаз"
        self.__durability = 1561
        self.__description = f"{self.__material} Кирка"

    def get_durability(self):
        return self.__durability

    def set_durability(self, value):
        if value >= 0:
            self.__durability = value

    def info(self):
        return f"{self.__description} ({self.get_durability()})"

    def use(self):
        if self.get_durability() > 0:
            self.set_durability(self.get_durability() - 1)
            return True
        else:
            print("Инструмент сломан")
            return False


class NetheritePickaxe:
    def __init__(self):
        self.__material = "Незерит"
        self.__durability = 2031
        self.__description = f"{self.__material} Кирка"

    def get_durability(self):
        return self.__durability

    def set_durability(self, value):
        if value >= 0:
            self.__durability = value

    def info(self):
        return f"{self.__description} ({self.get_durability()})"

    def use(self):
        if self.get_durability() > 0:
            self.set_durability(self.get_durability() - 1)
            return True
        else:
            print("Инструмент сломан")
            return False


class IronShovel:
    def __init__(self):
        self.__material = "Железо"
        self.__durability = 256
        self.__description = f"{self.__material} Лопата"

    def get_durability(self):
        return self.__durability

    def set_durability(self, value):
        if value >= 0:
            self.__durability = value

    def info(self):
        return f"{self.__description} ({self.get_durability()})"

    def use(self):
        if self.get_durability() > 0:
            self.set_durability(self.get_durability() - 1)
            return True
        else:
            print("Инструмент сломан")
            return False


class DiamondShovel:
    def __init__(self):
        self.__material = "Алмаз"
        self.__durability = 1561
        self.__description = f"{self.__material} Лопата"

    def get_durability(self):
        return self.__durability

    def set_durability(self, value):
        if value >= 0:
            self.__durability = value

    def info(self):
        return f"{self.__description} ({self.get_durability()})"

    def use(self):
        if self.get_durability() > 0:
            self.set_durability(self.get_durability() - 1)
            return True
        else:
            print("Инструмент сломан")
            return False


class NetheriteShovel:
    def __init__(self):
        self.__material = "Незерит"
        self.__durability = 2031
        self.__description = f"{self.__material} Лопата"

    def get_durability(self):
        return self.__durability

    def set_durability(self, value):
        if value >= 0:
            self.__durability = value

    def info(self):
        return f"{self.__description} ({self.get_durability()})"

    def use(self):
        if self.get_durability() > 0:
            self.set_durability(self.get_durability() - 1)
            return True
        else:
            print("Инструмент сломан")
            return False


class Workbench:
    def check_resources(self, *resources):
        for resource in resources:
            if resource.get_count() <= 0:
                return False
        return True


from tools import IronPickaxe, DiamondPickaxe, NetheritePickaxe, IronShovel, DiamondShovel, NetheriteShovel
from stick import Stick
from resource import Resource


def craft_pickaxe(stick, resource, material):
    if stick.get_count() >= 1 and resource.get_count() >= 2:
        stick.set_count(stick.get_count() - 1)
        resource.set_count(resource.get_count() - 2)
        if material == "iron":
            return IronPickaxe()
        elif material == "diamond":
            return DiamondPickaxe()
        elif material == "netherite":
            return NetheritePickaxe()
    else:
        print("Недостаточно ресурсов для крафта")
        return None


def craft_shovel(stick, resource, material):
    if stick.get_count() >= 1 and resource.get_count() >= 2:
        stick.set_count(stick.get_count() - 1)
        resource.set_count(resource.get_count() - 2)
        if material == "iron":
            return IronShovel()
        elif material == "diamond":
            return DiamondShovel()
        elif material == "netherite":
            return NetheriteShovel()
    else:
        print("Недостаточно ресурсов для крафта")
        return None


from stick import Stick
from resource import Resource
from crafting import craft_pickaxe, craft_shovel

stick = Stick()
iron_resource = Resource("Железо", 3)
diamond_resource = Resource("Алмаз", 3)
netherite_resource = Resource("Незерит", 3)

# Пытаемся создать железную кирку
iron_pickaxe = craft_pickaxe(stick, iron_resource, "iron")

if iron_pickaxe:
    print(iron_pickaxe.info())  # Вывод: Железо Кирка (32)
else:
    print("Не удалось создать кирку")

# Пытаемся создать алмазную лопату
diamond_shovel = craft_shovel(stick, diamond_resource, "diamond")

if diamond_shovel:
    print(diamond_shovel.info())  # Вывод: Алмаз Лопата (1561)
else:
    print("Не удалось создать лопату")